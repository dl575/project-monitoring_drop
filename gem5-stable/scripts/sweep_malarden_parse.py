#!/usr/bin/python

"""
Parse and plot output generated by sweep_malarden.py.
"""

import glob
import re
import subprocess
import os

import matplotlib.pyplot as plot

# directory where simulation results are stored
log_dir = os.environ["GEM5"] + "/m5out/"

# Benchmark names
benchmarks = []
# Dictionaries storing data: [wcet, drop, not_drops, ticks]
wcets = {}
drops = {}
not_drops = {}
ticks = {}

# For each log file
for filename in glob.glob(os.path.join(log_dir, "wcet*.log")):
  # Parse filename to determine benchmark and wcet
  parse_filename = re.search("wcet_([\w_]*)_([\d]*).log", filename)
  benchmark = parse_filename.group(1)
  # Store benchmark name and WCET
  if benchmark not in benchmarks:
    benchmarks.append(benchmark)
    wcets[benchmark] = [int(parse_filename.group(2))]
  else:
    wcets[benchmark].append(int(parse_filename.group(2)))

  # Read log file
  log_file = open(filename, 'r')
  for line in log_file:
    # Find drops line
    drop_match = re.search("Drops = ([\d]*), Non-drops = ([\d]*)", line)
    if drop_match:
      if not benchmark in drops.keys():
        drops[benchmark] = []
      drops[benchmark].append(int(drop_match.group(1)))
      if not benchmark in not_drops.keys():
        not_drops[benchmark] = []
      not_drops[benchmark].append(int(drop_match.group(2)))
    # Find total ticks
    tick_match = re.search("Exiting @ tick ([\d]*)", line)
    if tick_match:
      if not benchmark in ticks.keys():
        ticks[benchmark] = []
      ticks[benchmark].append(int(tick_match.group(1))) 
  log_file.close()

# Print out data to verify parsing
print benchmarks
print wcets
print drops
print not_drops
print ticks

# Plot all the drops vs. WCET and execution time vs. WCET plots 
# using subplots on one figure.
nsubplot = 1
fig = plot.figure()

# For each set of benchmarks
for benchmark in benchmarks:

  # Data for this benchmark set
  pwcets = wcets[benchmark]
  pdrops = drops[benchmark]
  pnot_drops = not_drops[benchmark]
  pticks = ticks[benchmark]

  # Plot drops vs. WCET
  ax1 = plot.subplot(330 + nsubplot)
  ax1.scatter(pwcets, pdrops)
  ax1.scatter(pwcets, pnot_drops, c='r')
  plot.title(benchmark)
  plot.xlabel("WCET")
  plot.ylabel("Drops")
  plot.grid(True)
  #plot.legend(("Dropped", "Not dropped"), loc="best")

  # Next subplot
  nsubplot += 1

  # Plot execution time vs. WCET
  plot.subplot(330 + nsubplot)
  plot.scatter(pwcets, pticks)
  plot.title(benchmark)
  plot.xlabel("WCET")
  plot.ylabel("Execution time")
  plot.grid(True)

  # Next subplot
  nsubplot += 1

plot.show()
